import asyncio
import os
import json
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

from database import create_tables, add_user, update_score, get_score, get_top_users

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    full_name = State()
    phone = State()
    email = State()

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
with open("questions.json", "r", encoding="utf-8") as f:
    questions = json.load(f)

user_answers = {}

# /start ‚Äî –Ω–∞—á–∞–ª–æ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message(F.text == "/start")
async def handle_start(message: Message, state: FSMContext):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(Registration.full_name)

@dp.message(Registration.full_name)
async def handle_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]], resize_keyboard=True, one_time_keyboard=True)
    await message.answer("üìû –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)
    await state.set_state(Registration.phone)

@dp.message(Registration.phone, F.contact)
async def handle_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Email:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Registration.email)

@dp.message(Registration.email)
async def handle_email(message: Message, state: FSMContext):
    data = await state.update_data(email=message.text)
    user_data = await state.get_data()
    add_user(
        telegram_id=message.from_user.id,
        full_name=user_data["full_name"],
        phone=user_data["phone"],
        email=user_data["email"]
    )
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∏–ª–∏ /points —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–∞–ª–ª—ã.")
    await state.clear()

# /test ‚Äî –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
@dp.message(F.text == "/test")
async def start_test(message: Message):
    user_id = message.from_user.id
    user_answers[user_id] = {"score": 0, "current": 0}
    await send_question(message.chat.id, user_id)

@dp.message(F.text == "/myid")
async def show_my_id(message: Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")

# /points ‚Äî –±–∞–ª–ª—ã
@dp.message(F.text == "/points")
async def show_points(message: Message):
    score = get_score(message.from_user.id)
    await message.answer(f"üåü –í–∞—à–∏ –±–∞–ª–ª—ã: {score}")

MY_ADMIN_ID = 1631928667  # <-- –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π ID

@dp.message(F.text == "/export_users")
async def export_users(message: Message):
    if message.from_user.id != MY_ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    from database import get_all_users
    import csv

    users = get_all_users()

    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    file_path = "users_export.csv"

    with open(file_path, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email", "–ë–∞–ª–ª—ã"])
        writer.writerows(users)

    await message.answer_document(types.FSInputFile(file_path), caption="üìÑ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# /top ‚Äî —Ç–æ–ø-–ª–∏–¥–µ—Ä—ã
@dp.message(F.text == "/top")
async def show_top(message: Message):
    top_users = get_top_users()
    text = "üèÜ –¢–û–ü-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    for i, (name, score) in enumerate(top_users, 1):
        text += f"{i}. {name} ‚Äî {score} –±–∞–ª–ª–æ–≤\n"
    await message.answer(text)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(chat_id, user_id):
    current = user_answers[user_id]["current"]
    if current >= len(questions):
        score = user_answers[user_id]["score"]
        update_score(user_id, score)
        await bot.send_message(chat_id, f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –∏–∑ {len(questions)} –±–∞–ª–ª–æ–≤.")
        return

    q = questions[current]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=opt, callback_data=f"answer_{i}")]
            for i, opt in enumerate(q["options"])
        ]
    )
    await bot.send_message(chat_id, q["question"], reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@dp.callback_query(F.data.startswith("answer_"))
async def process_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    current = user_answers[user_id]["current"]
    correct_index = questions[current]["correct"]
    selected = int(callback.data.split("_")[1])

    if selected == correct_index:
        user_answers[user_id]["score"] += 1
        await callback.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")

    user_answers[user_id]["current"] += 1
    await send_question(callback.message.chat.id, user_id)

# –ó–∞–ø—É—Å–∫
async def main():
    create_tables()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
